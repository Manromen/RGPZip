### project configuration

# C++ project
language: cpp

# Use Ubuntu 14.04 (Trusty) 
dist: trusty
sudo: required
group: edge

branches:
  only:
    - master

git:
    submodules: true

before_install:

  # Get version from git tag
  - export LIBRARY_VERSION=$(git describe --abbrev=0 --tags)

  # Install Linux Dependencies (zlib, cmake, Google Drive Downloader)
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo apt-get install zlib1g-dev; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo curl -L -o /root/cmake.sh https://cmake.org/files/v3.12/cmake-3.12.2-Linux-x86_64.sh; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo chmod +x /root/cmake.sh; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo /root/cmake.sh --exclude-subdir --prefix=/usr; fi

  # Download Google Drive Downloader
  - curl -OL https://gist.githubusercontent.com/Manromen/4e4cf28ddf5bf2e4ee5cc2dfe4055952/raw/4e752a1edf816dccf9c464fe05a03d1ee3b52b6c/gDriveDownload.sh
  - chmod +x gDriveDownload.sh;

  # Install Android Boost / NDK from Google Drive
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then ./gDriveDownload.sh "1WwOce4Ci89f56a0UsvaRHS-8SpeARagj" ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then unzip -q -o boost-android-r17b-15-clang-1.68.0.zip -d deps/; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then ./gDriveDownload.sh "1TC5k_qcdZthAjLZOZG50iYdvzHO0n8ck" ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then unzip -q -o android-ndk-r17b-linux-x86_64.zip ; fi

  # Install iOS Boost and zlib from Google Drive
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == ios ]; then ./gDriveDownload.sh "1ILxNcA5SS9_IVtHVMXsq6rmEUdVOsJ0w" ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == ios ]; then unzip -q -o boost-ios-sdk11.4-clang-1.68.0.zip -d deps/; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == ios ]; then curl -L -o zlib-1.2.11-ios-sdk11.4.zip https://drive.google.com/uc\?export\=download\&id\=1PWK67Q-dGGZ6GKx3qOCFw9toD7bLqmTr ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == ios ]; then unzip -o zlib-1.2.11-ios-sdk11.4.zip -d deps/; fi

  # Install Linux Boost from Google Drive
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == linux ]; then ./gDriveDownload.sh "1Z_bHUgDjVENLx5jjtD7OMgTafRuzT-zJ" ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == linux ]; then unzip -q -o boost-ubuntu-trusty-1.68.0.zip -d deps/; fi

  # Install macOS Boost and zlib from Google Drive
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then ./gDriveDownload.sh "1HN3SLqjHDYP8G4QjIX92zB_tpBcAlgi-" ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then unzip -q -o boost-macos-sdk10.13-clang-1.68.0.zip -d deps/; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then curl -L -o zlib-1.2.11-macos.zip https://drive.google.com/uc\?export\=download\&id\=1Nt0jndWSv_hZujCBneGAuINrVAH7uNW2 ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then unzip -o zlib-1.2.11-macos.zip -d deps/; fi

### build matrix
matrix:
  include:

    # Linux / GCC
    - os: linux
      compiler: gcc
      env:
        - TARGET_PLATFORM=linux
      addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-5', 'ninja-build']

    # macOS
    - os: osx
      osx_image: xcode9.4
      compiler: clang
      env:
        - TARGET_PLATFORM=ios

    # Android / clang
    #- os: linux
    #  compiler: clang
    #  env:
    #    - TARGET_PLATFORM=android
    #    - NDK_VERSION=r17b
    #  addons:
    #  apt:
    #    sources: ['ubuntu-toolchain-r-test']
    #    packages: ['g++-5' ]

### build script
script:
  # show OS/compiler version
  - uname -a

  # make sure CXX is correctly set
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  # create build / install folder
  - mkdir build; mkdir -p install/lib; cd build

  # Android build
  # API 19 ARCH armeabi-v7a
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then /usr/bin/cmake -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=19 -DCMAKE_ANDROID_NDK=${TRAVIS_BUILD_DIR}/android-ndk-${NDK_VERSION} -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a -DCMAKE_ANDROID_STL_TYPE=c++_static -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/deps -DCMAKE_LIBRARY_PATH=${TRAVIS_BUILD_DIR}/deps/lib/armeabi-v7a -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/install/armeabi-v7a" .. ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then make install ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then mv ${TRAVIS_BUILD_DIR}/install/armeabi-v7a/lib ${TRAVIS_BUILD_DIR}/install/lib/armeabi-v7a ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then mv ${TRAVIS_BUILD_DIR}/install/armeabi-v7a/include ${TRAVIS_BUILD_DIR}/install/ ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then rm -rf * ; fi
  # API 19 ARCH x86
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then /usr/bin/cmake -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=19 -DCMAKE_ANDROID_NDK=${TRAVIS_BUILD_DIR}/android-ndk-${NDK_VERSION} -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang -DCMAKE_ANDROID_ARCH_ABI=x86 -DCMAKE_ANDROID_STL_TYPE=c++_static -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/deps -DCMAKE_LIBRARY_PATH=${TRAVIS_BUILD_DIR}/deps/lib/x86 -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/install/x86" .. ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then make install ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then mv ${TRAVIS_BUILD_DIR}/install/x86/lib ${TRAVIS_BUILD_DIR}/install/lib/x86 ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then rm -rf * ; fi
  # API 21 ARCH arm64-v8a
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then /usr/bin/cmake -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_ANDROID_NDK=${TRAVIS_BUILD_DIR}/android-ndk-${NDK_VERSION} -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a -DCMAKE_ANDROID_STL_TYPE=c++_static -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/deps -DCMAKE_LIBRARY_PATH=${TRAVIS_BUILD_DIR}/deps/lib/arm64-v8a -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/install/arm64-v8a" .. ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then make install ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then mv ${TRAVIS_BUILD_DIR}/install/arm64-v8a/lib ${TRAVIS_BUILD_DIR}/install/lib/arm64-v8a ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then rm -rf * ; fi
  # API 21 ARCH x86_64
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then /usr/bin/cmake -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_ANDROID_NDK=${TRAVIS_BUILD_DIR}/android-ndk-${NDK_VERSION} -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang -DCMAKE_ANDROID_ARCH_ABI=x86_64 -DCMAKE_ANDROID_STL_TYPE=c++_static -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/deps -DCMAKE_LIBRARY_PATH=${TRAVIS_BUILD_DIR}/deps/lib/x86_64 -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/install/x86_64" .. ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then make install ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then mv ${TRAVIS_BUILD_DIR}/install/x86_64/lib ${TRAVIS_BUILD_DIR}/install/lib/x86_64 ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == android ]; then rm -rf * ; fi

  # iOS build
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == ios ]; then cmake  -DCMAKE_TOOLCHAIN_FILE="${TRAVIS_BUILD_DIR}/cmake/Toolchains/ios.toolchain.cmake" -DIOS_PLATFORM="OS" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/install" -DCMAKE_PREFIX_PATH="${TRAVIS_BUILD_DIR}/deps" .. ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == ios ]; then make install ; fi

  # Linux build
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == linux ]; then /usr/bin/cmake "-DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/deps" -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/install" -DCMAKE_LIBRARY_PATH=${TRAVIS_BUILD_DIR}/deps/lib/x86_64 .. ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == linux ]; then make ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == linux ]; then make install ; fi
  - if [ $TRAVIS_OS_NAME == linux ] && [ $TARGET_PLATFORM == linux ]; then make test ; fi

  # macOS build
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then cmake "-DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/deps" -DCMAKE_INSTALL_PREFIX="${TRAVIS_BUILD_DIR}/install" .. ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then make ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then make install ; fi
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == osx ]; then make test ; fi

  # iOS ranlib
  - if [ $TRAVIS_OS_NAME == osx ] && [ $TARGET_PLATFORM == ios ]; then xcrun ranlib "${TRAVIS_BUILD_DIR}/install/lib/*.a" || true ; fi

  # ZIP result
  - cd "${TRAVIS_BUILD_DIR}/install"
  - zip -r "${TRAVIS_BUILD_DIR}/rgpzip-${TARGET_PLATFORM}-${LIBRARY_VERSION}.zip" include lib
  - cd "${TRAVIS_BUILD_DIR}"
